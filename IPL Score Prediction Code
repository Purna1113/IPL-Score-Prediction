import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
import keras
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
import ipywidgets as widgets
from IPython.display import display, clear_output

# Load the dataset
ipl_data = pd.read_csv('/content/ipl_data.csv')

# Drop unnecessary columns
columns_to_drop = ['date', 'runs', 'wickets', 'overs', 'runs_last_5', 'wickets_last_5', 'mid', 'striker', 'non-striker']
ipl_cleaned = ipl_data.drop(columns=columns_to_drop)
X = ipl_cleaned.drop(['total'], axis=1)
y = ipl_cleaned['total']

# Label Encoding
encoders = {
    'venue': LabelEncoder(),
    'bat_team': LabelEncoder(),
    'bowl_team': LabelEncoder(),
    'batsman': LabelEncoder(),
    'bowler': LabelEncoder()
}

for col, encoder in encoders.items():
    X[col] = encoder.fit_transform(X[col])

# Train-test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Data Scaling
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define the neural network model
model = keras.Sequential([
    keras.layers.Input(shape=(X_train_scaled.shape[1],)),  # Input layer
    keras.layers.Dense(512, activation='relu'),  # First hidden layer
    keras.layers.Dense(256, activation='relu'),  # Second hidden layer
    keras.layers.Dense(1, activation='linear')  # Output layer
])

# Compile the model with Huber loss
huber_loss = tf.keras.losses.Huber(delta=1.0)
model.compile(optimizer='adam', loss=huber_loss)

# Train the model
model.fit(X_train_scaled, y_train, epochs=50, batch_size=64, validation_data=(X_test_scaled, y_test))

# Predictions
y_pred = model.predict(X_test_scaled)

# Calculate evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')

# Define interactive widgets
venue_widget = widgets.Dropdown(options=ipl_cleaned['venue'].unique().tolist(), description='Venue:')
batting_team_widget = widgets.Dropdown(options=ipl_cleaned['bat_team'].unique().tolist(), description='Batting Team:')
bowling_team_widget = widgets.Dropdown(options=ipl_cleaned['bowl_team'].unique().tolist(), description='Bowling Team:')
striker_widget = widgets.Dropdown(options=ipl_cleaned['batsman'].unique().tolist(), description='Striker:')
bowler_widget = widgets.Dropdown(options=ipl_cleaned['bowler'].unique().tolist(), description='Bowler:')
predict_button = widgets.Button(description="Predict Score")
output_widget = widgets.Output()

# Function to predict score
def predict_score(b):
    with output_widget:
        clear_output()
        # Get user input
        user_input = {
            'venue': encoders['venue'].transform([venue_widget.value]),
            'bat_team': encoders['bat_team'].transform([batting_team_widget.value]),
            'bowl_team': encoders['bowl_team'].transform([bowling_team_widget.value]),
            'batsman': encoders['batsman'].transform([striker_widget.value]),
            'bowler': encoders['bowler'].transform([bowler_widget.value])
        }

        # Prepare data for prediction
        input_data = np.array([user_input[col] for col in user_input]).reshape(1, -1)
        input_data_scaled = scaler.transform(input_data)

        # Predict the score
        predicted_score = model.predict(input_data_scaled)[0, 0]

        print(f"Predicted Score: {predicted_score:.2f}")

predict_button.on_click(predict_score)
display(venue_widget, batting_team_widget, bowling_team_widget, striker_widget, bowler_widget, predict_button, output_widget)
